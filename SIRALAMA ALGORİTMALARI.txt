2-3-4 Ağaçları 

class Node {
    int numKeys;
    int[] keys;
    Node[] children;

    public Node() {
        numKeys = 0;
        keys = new int[3];
        children = new Node[4];
    }
}

public class TwoThreeFourTree {
    private Node root;

    public TwoThreeFourTree() {
        root = null;
    }

    public void insert(int key) {
        if (root == null) {
            root = new Node();
            root.keys[0] = key;
            root.numKeys = 1;
        } else {
            Node[] splitResult = insert(root, key);
            if (splitResult != null) {
                Node newRoot = new Node();
                newRoot.keys[0] = splitResult[0].keys[0];
                newRoot.children[0] = splitResult[0];
                newRoot.children[1] = splitResult[1];
                root = newRoot;
            }
        }
    }

    private Node[] insert(Node node, int key) {
        if (node == null) {
            Node newNode = new Node();
            newNode.keys[0] = key;
            newNode.numKeys = 1;
            return new Node[]{newNode, null};
        } else {
            int i = 0;
            while (i < node.numKeys && key > node.keys[i]) {
                i++;
            }

            Node[] splitResult = insert(node.children[i], key);

            if (splitResult != null) {
                int indexToInsert = findIndexToInsert(node, splitResult[0].keys[0]);
                shiftArrays(node.keys, indexToInsert, node.numKeys, 1);
                shiftArrays(node.children, indexToInsert + 1, node.numKeys + 1, 1);
                node.keys[indexToInsert] = splitResult[0].keys[0];
                node.children[indexToInsert + 1] = splitResult[0];
                node.children[indexToInsert + 2] = splitResult[1];
                node.numKeys++;
                if (node.numKeys == 3) {
                    return splitNode(node);
                }
            }

            return null;
        }
    }

    private int findIndexToInsert(Node node, int key) {
        int i = 0;
        while (i < node.numKeys && key > node.keys[i]) {
            i++;
        }
        return i;
    }

    private Node[] splitNode(Node node) {
        Node[] result = new Node[2];
        Node leftNode = new Node();
        Node rightNode = new Node();

        leftNode.keys[0] = node.keys[0];
        rightNode.keys[0] = node.keys[2];

        leftNode.children[0] = node.children[0];
        leftNode.children[1] = node.children[1];

        rightNode.children[0] = node.children[2];
        rightNode.children[1] = node.children[3];

        result[0] = leftNode;
        result[1] = rightNode;

        return result;
    }

    private void shiftArrays(int[] array, int startIndex, int endIndex, int shiftAmount) {
        for (int i = endIndex - 1; i >= startIndex; i--) {
            array[i + shiftAmount] = array[i];
        }
    }

    private void shiftArrays(Node[] array, int startIndex, int endIndex, int shiftAmount) {
        for (int i = endIndex - 1; i >= startIndex; i--) {
            array[i + shiftAmount] = array[i];
        }
    }

    public void display() {
        if (root != null) {
            display(root, 0);
        }
    }

    private void display(Node node, int level) {
        if (node != null) {
            for (int i = 0; i < node.numKeys; i++) {
                display(node.children[i], level + 1);
                for (int j = 0; j < level; j++) {
                    System.out.print("    ");
                }
                System.out.println(node.keys[i]);
            }
            display(node.children[node.numKeys], level + 1);
        }
    }

    public static void main(String[] args) {
        TwoThreeFourTree tree = new TwoThreeFourTree();
        tree.insert(10);
        tree.insert(20);
        tree.insert(5);
        tree.insert(6);
        tree.insert(12);
        tree.insert(30);

     
